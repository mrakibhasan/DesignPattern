Design patterns are well proved solution problem specific task.design patterns are programming language independent strategies 
for solving the common object-oriented design problems. That means, a design pattern represents an idea, not a particular implementation.

The Design pattern are based on the following principle:
 1.Program to an interface not an implementation
 2.Favor object composition over inheritance
 3.Represent and idea to solve the particular problem not the implementation.
 
The design pattern make the code more flexible, reusable and maintainable. It is the most important part because java internally follows design patterns. 
 
  Creational:
  1. Singleton pattern:
  2. Prototype Pattern:
  3. Factory Pattern:
 
  Structural:
  4. Adapter Pattern:
  5. Bridge Pattern:
  6. Composite Pattern:
  7. Facade Pattern:
  8. Proxy pattern:
  9. Decorator pattern: 
  
  Behavioural: 
  10. Observer pattern: 
  
 ----------------------------------------------------------------------------------------------------------------------------------------------------------- 
  
1. Singleton pattern: Singleton Pattern says that just"define a class that has only one instance and provides a global point of access to it".
	
	How to create Singleton design pattern:	To create the singleton class, we need to have static member of class, private constructor and static factory method.
	Static member: It gets memory only once because of static, it contains the instance of the Singleton class.
	Private constructor: It will prevent to instantiate the Singleton class from outside the class.
	Static factory method: This provides the global point of access to the Singleton object and returns the instance to the caller.
	
	Advantage: Saves memory because object is not created for every request. Only single instance is reused again and again.
	
	Usage of Singleton design pattern: 
    Singleton pattern is mostly used in multi-threaded and database applications. It is used in logging, caching, thread pools, configuration settings etc.
	
	Example: We can create JDBC singleton class. So rather than creating the new object of DAO classes if we create a single instances we can use for insert/delete/update/read.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Prototype pattern:  prototype pattern says cloning of an existing object rather than creating of an new one  and can also be customized as per requirements.
   
   Advnatages:
 	It reduces the need of sub-classing
 	It hide complexities of creating objects.
 	It lets you add remove objects at runtime.
 
 Usage of Prototype Pattern:

	When the classes are instantiated at runtime.
	When the cost of creating an object is expensive or complicated.
	When you want to keep the number of classes in an application minimum.
 --------------------------------------------------------------------------------------------------------------------------------------------------------------------
 3. Factory pattern:A Factory Pattern or Factory Method Pattern says that just define an interface or abstract class for creating an object  but let the subclasses decide which class to instantiate. 
	In other words, subclasses are responsible to create the instance of the class.	Advantages: Allow the subclasses to choose the type of objects to create.
	loose coupling system instead to bind class specific implementation.
	Advantage of Factory Design Pattern

	Factory Method Pattern allows the sub-classes to choose the type of objects to create.
	It promotes the loose-coupling by eliminating the need to bind application-specific classes into the code. That means the code interacts solely with the resultant interface or abstract class, so that it will work with any classes that implement that interface or that extends that abstract class.
	
	Usage of Factory Design Pattern:
	When a class doesn't know what sub-classes will be required to create
	When a class wants that its sub-classes specify the objects to be created.
	When the parent classes choose the creation of objects to its sub-classes.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 4. Adpater Pattern: An Adapter Pattern says that just "converts the interface of a class into another interface that a client wants".In other words, to provide
   the interface according to client requirement while using the services of a class with a different interface.The Adapter Pattern is also known as Wrapper.
   
   Advantage of Adapter Pattern
	It allows two or more previously incompatible objects to interact.
	It allows reusability of existing functionality.
	Usage of Adapter pattern:

	It is used:
	When an object needs to utilize an existing class with an incompatible interface.
	When you want to create a reusable class that cooperates with classes which don't have compatible interfaces.
	When you want to create a reusable class that cooperates with classes which don't have compatible interfaces.
	

	There are the following specifications for the adapter pattern:

	Target Interface: This is the desired interface class which will be used by the clients.
	Adapter class: This class is a wrapper class which implements the desired target interface and modifies the specific request available from the 
	Adaptee class.
	Adaptee class: This is the class which is used by the Adapter class to reuse the existing functionality and modify them for desired use.
	Client: This class will interact with the Adapter class.
---------------------------------------------------------------------------------------------------------------------------------------------------------------
5. Birdge Design Pattern: decouple the functional abstraction from implementation that two can very independently. Separation of the 
   implementation from the interface.

	Advantage of Bridge Pattern:
	It enables the separation of implementation from the interface.
	It improves the extensibility.
	It allows the hiding of implementation details from the client.
	
	Usage of Bridge Pattern:
	When you don't want a permanent binding between the functional abstraction and its implementation.
	When both the functional abstraction and its implementation need to extended using sub-classes.
Example: suppose one interface DrawApi (one interface drawCircle)---RedCircle and GreenCircle Implements DrawApi
						another one abstract method shape(invoke drawApi, draw method)----Circle shape extends this method.
						The final goal is to color the shape either RED and GREEN
						so here DrawApi and Shape are two interface where drawApi contains the color method and Shape contains the (circle,rectangle etc)
                        so we need make bridge between DrawApi and shape. Here in the shape we invoke drawApi.
-------------------------------------------------------------------------------------------------------------------------------------------------
6. Composite pattern: Composite pattern is used where we need to treat a group of objects in similar way as a single object. 
                      Composite pattern composes objects in term of a tree structure to represent part as well as whole hierarchy	
                      Elements used in Composite Pattern:

Let's see the 4 elements of composte pattern.

1) Component

Declares interface for objects in composition.
Implements default behavior for the interface common to all classes as appropriate.
Declares an interface for accessing and managing its child components.
2) Leaf

Represents leaf objects in composition. A leaf has no children.
Defines behavior for primitive objects in the composition.
3) Composite

Defines behavior for components having children.
Stores child component.
Implements child related operations in the component interface.
4) Client

Manipulates objects in the composition through the component interface.
------------------------------------------------------------------------------------------------------------
7. Facade Design Pattern: Facade pattern hides the complexities of the system and provides an interface to the client using which the client can access the system. 
	This type of design pattern comes under structural pattern as this pattern adds an interface to existing system to hide its complexities.
	Facade Pattern says that just "just provide a unified and simplified interface to a set of interfaces in a subsystem, 
	therefore it hides the complexities of the subsystem from the client".
	In other words, Facade Pattern describes a higher-level interface that makes the sub-system easier to use*/

-----------------------------------------------------------------------------------------------------------------------------------
8. observer pattern:
  
    Observer pattern is used when there is one-to-many relationship between objects such as if one object is modified, 
	its dependent objects are to be notified automatically.	Observer pattern falls under behavioral pattern category.

	Implementation 	Observer pattern uses three actor classes. Subject, Observer and Client. 
	Subject is an object having methods to attach and detach observers to a client object. 
	We have created an abstract class Observer and a concrete class Subject that is extending class Observer.
---------------------------------------------------------------------------------------------------------------------
9. Proxy Design Pattern:

	 proxy means object representing another objects
	 
	 provides the controlling for accessing the original objects.
	 we can perform many operations like hinding the informaiton of orinignal objects, on demand loading.
	 
	 
	 consider a situation where there is a multiple database call to extract huge size image. Since this is an expensive operation so here
	 we use proxy pattern which would create multiple proxie's and point to the huge size of memory consuming object for further processing
	 The real object gets created only when a client first request/accessing the objects and after that we can just refer to the proxy to resuse
	 the objects.This avoids the duplication of the objects and hence saving memory.
	 we need to use java.lang.proxy.reflectProxy: that provide the invocation handler and we need implement invoke method. That means any request come
	 that comes to invoke method if the object is there then retrieve from there no to hit the database.
---------------------------------------------------------------------------------------------------------------------------------------	 
10. Decorator Pattern:
  Decorator pattern allows a user to add new functionality to an existing object without altering its structure. 
  In other words, The Decorator Pattern uses composition instead of inheritance to extend the functionality of an object at runtime.

	Advantage of Decorator Pattern
	
	It provides greater flexibility than static inheritance.
	It enhances the extensibility of the object, because changes are made by coding new classes.
	It simplifies the coding by allowing you to develop a series of functionality from targeted classes instead of coding all of the behavior into the object.
	
	Usage of Decorator Pattern
	
	It is used:
	
	When you want to transparently and dynamically add responsibilities to objects without affecting other objects.
	When you want to add responsibilities to an object that you may want to change in future.
	Extending functionality by sub-classing is no longer practical.
  
  